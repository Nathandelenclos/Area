version: '3.7'
name: area
services:
  rabbitmq:
    image: rabbitmq:3.8.3-management
    container_name: rabbitmq
    hostname: rabbitmq
    volumes:
      - ./rabbitmq/data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - .env.docker

  mysql:
    image: mysql:latest
    container_name: mysql
    hostname: mysql
    volumes:
      - ./mysql/data:/var/lib/mysql
    ports:
      - "3306:3306"
    env_file:
      - .env.docker
    restart: always

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api
    hostname: api
    volumes:
      - ./:/app
    environment:
      - MICROSERVICE=api
    ports:
      - "${APP_PORT}:${APP_PORT}"
    env_file:
      - .env.docker
    depends_on:
      - mysql
      - rabbitmq
    restart: always

  auth:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: auth
    hostname: auth
    volumes:
      - ./:/app
    environment:
      - MICROSERVICE=auth
    env_file:
      - .env.docker
    depends_on:
      - mysql
      - rabbitmq
    restart: always

  discord:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: discord
    hostname: discord
    volumes:
      - ./:/app
    environment:
      - MICROSERVICE=discord
    env_file:
      - .env.docker
    depends_on:
      - mysql
      - rabbitmq
    restart: always

  spotify:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spotify
    hostname: spotify
    volumes:
      - ./:/app
    environment:
      - MICROSERVICE=spotify
    env_file:
      - .env.docker
    depends_on:
      - mysql
      - rabbitmq
    restart: always

  instagram:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: instagram
    hostname: instagram
    volumes:
      - ./:/app
    environment:
      - MICROSERVICE=instagram
    env_file:
      - .env.docker
    depends_on:
      - mysql
      - rabbitmq
    restart: always

  gmail:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gmail
    hostname: gmail
    volumes:
      - ./:/app
    environment:
      - MICROSERVICE=gmail
    env_file:
      - .env.docker
    depends_on:
      - mysql
      - rabbitmq
    restart: always

  youtube:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: youtube
    hostname: youtube
    volumes:
      - ./:/app
    environment:
      - MICROSERVICE=youtube
    env_file:
      - .env.docker
    depends_on:
      - mysql
      - rabbitmq
    restart: always

  google_drive:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: google_drive
    hostname: google_drive
    volumes:
      - ./:/app
    environment:
      - MICROSERVICE=google_drive
    env_file:
      - .env.docker
    depends_on:
      - mysql
      - rabbitmq
    restart: always

  queue:
    image: node:18
    container_name: queue
    hostname: queue
    user: "node"
    working_dir: /home/node/app
    environment:
      - NODE_ENV=production
    volumes:
      - ./:/home/node/app
    env_file:
      - .env.docker
    command: "npx ts-node --project tsconfig.json ./script/cron.ts"
    depends_on:
      - mysql
      - rabbitmq
    restart: always
