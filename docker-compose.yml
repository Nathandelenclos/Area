version: '3.7'
name: area
services:
  rabbitmq:
    image: rabbitmq:3.8.3-management
    container_name: rabbitmq
    hostname: rabbitmq
    volumes:
      - ./rabbitmq/data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - .env

  mysql:
    image: mysql:latest
    container_name: mysql
    hostname: mysql
    volumes:
      - ./mysql/data:/var/lib/mysql
    ports:
      - "3306:3306"
    env_file:
      - .env
    restart: always

  api:
    image: area_app:latest
    build: api
    container_name: api
    hostname: api
    volumes:
      - ./api/:/app
    environment:
      - MICROSERVICE=api
    ports:
      - "${API_PORT}:${API_PORT}"
    env_file:
      - .env
    depends_on:
      - mysql
      - rabbitmq
    restart: always

  auth:
    image: area_app:latest
    container_name: auth
    hostname: auth
    volumes:
      - ./api/:/app
    environment:
      - MICROSERVICE=auth
    env_file:
      - .env
    depends_on:
      - mysql
      - rabbitmq
      - api
    restart: always

  service:
    image: area_app:latest
    container_name: service
    hostname: service
    volumes:
      - ./api/:/app
    environment:
      - MICROSERVICE=service
    env_file:
      - .env
    depends_on:
      - mysql
      - rabbitmq
      - api
    restart: always

  applet:
    image: area_app:latest
    container_name: applet
    hostname: applet
    volumes:
      - ./api/:/app
    environment:
      - MICROSERVICE=applet
    env_file:
      - .env
    depends_on:
      - mysql
      - rabbitmq
      - api
    restart: always

  discord:
    image: area_app:latest
    container_name: discord
    hostname: discord
    volumes:
      - ./api/:/app
    environment:
      - MICROSERVICE=discord
    env_file:
      - .env
    depends_on:
      - mysql
      - rabbitmq
      - api
    restart: always

  spotify:
    image: area_app:latest
    container_name: spotify
    hostname: spotify
    volumes:
      - ./api/:/app
    environment:
      - MICROSERVICE=spotify
    env_file:
      - .env
    depends_on:
      - mysql
      - rabbitmq
      - api
    restart: always

  news:
    image: area_app:latest
    container_name: news
    hostname: news
    volumes:
      - ./api/:/app
    environment:
      - MICROSERVICE=news
    env_file:
      - .env
    depends_on:
      - mysql
      - rabbitmq
      - api
    restart: always

  slack:
    image: area_app:latest
    container_name: slack
    hostname: slack
    volumes:
      - ./api/:/app
    environment:
      - MICROSERVICE=slack
    env_file:
      - .env
    depends_on:
      - mysql
      - rabbitmq
      - api
    restart: always

  teams:
    image: area_app:latest
    container_name: teams
    hostname: teams
    volumes:
      - ./api/:/app
    environment:
      - MICROSERVICE=teams
    env_file:
      - .env
    depends_on:
      - mysql
      - rabbitmq
      - api
    restart: always

  weather:
    image: area_app:latest
    container_name: weather
    hostname: weather
    volumes:
      - ./api/:/app
    environment:
      - MICROSERVICE=weather
    env_file:
      - .env
    depends_on:
      - mysql
      - rabbitmq
      - api
    restart: always

  timer:
    image: area_app:latest
    container_name: timer
    hostname: timer
    volumes:
      - ./api/:/app
    environment:
      - MICROSERVICE=timer
    env_file:
      - .env
    depends_on:
      - mysql
      - rabbitmq
      - api
    restart: always

  github:
    image: area_app:latest
    container_name: github
    hostname: github
    volumes:
      - ./api/:/app
    environment:
      - MICROSERVICE=github
    env_file:
      - .env
    depends_on:
      - mysql
      - rabbitmq
      - api
    restart: always

  queue:
    image: node:lts-alpine
    container_name: queue
    hostname: queue
    user: "node"
    working_dir: /home/node/app
    environment:
      - NODE_ENV=production
    volumes:
      - ./api/:/home/node/app
    env_file:
      - .env
    command: "npx ts-node --project tsconfig.json ./script/cron.ts"
    depends_on:
      - mysql
      - rabbitmq
    restart: always

  web:
    build: web
    container_name: web
    hostname: web
    volumes:
      - shared-folder:/usr/share/nginx/html/build
    ports:
      - "${FRONT_PORT}:80"
    restart: always

volumes:
  shared-folder:
